audio#main-player preload="none" style="width: 500px;" controls="controls"

h1
  a href=path_to(:abyss_folder).with(0) abyss
  | ://
  - Folder.where(id: @folder.parent_ids).order(path: :asc).each do |p|
    - next if p.name.empty? # skip root
    == p.is_symlink ? '&#x1f517;' : nil
    a href=path_to(:abyss_folder).with(p.id) = p.name
    | /
  == @folder.is_symlink ? '&#x1f517;' : nil
  = @folder.name
  span< style="font-size: 0.5em; font-weight: normal"
    a href=path_to(:abyss_folder).with(@folder.id) data-method="delete" data-confirm="Delete?" Delete

- if @folder.release_id != nil
  = "* #{@folder.release.title} (#{@folder.release.year}) by "
  a href=path_to(:performer).with(@folder.release.performer.id) = @folder.release.performer.title

  - unless @folder.is_processed
    br
    a href=path_to(:abyss_process_folder).with(@folder.id) data-method="POST" data-confirm="Mark this folder as processed?" Full process!

p style="font-size: 0.8em; opacity: 0.5"
  - $config['rating_notes'].each_with_index do |n,i|
    == RATING_EMOJI[i+1]
    = " #{n} "

ul.folders-list
  - @folder.subfolders.each do |f|
    li
      == f.is_symlink ? '&#x1f517;' : nil
      a class=(f.is_processed ? 'processed-folder' : nil) href=path_to(:abyss_folder).with(f.id) = f.name
      - if f.release_id
        '  by
        a style="background-color: #ffec83" href=path_to(:performer).with(f.release.performer.id) = f.release.performer.title
      span.li-autohide
        '  | 
        a href=path_to(:abyss_folder).with(f.id) data-method="delete" data-confirm="Delete?" Delete

ruby:
  ratings = RATING_EMOJI.map{|i| {emoji: i, score: RATING_EMOJI.index(i) - 1}}
  @folder.get_files!
  audio_count = 0
  @folder.files.each do |md5,details|
    audio_count += 1 if details['type'] == 'audio'
  end

- unless @folder.files.blank?
  h2 Files
  ul.files-list
    - @folder.files.map{|md5,details|details['fln']}.sort.each do |fln|
      - md5 = @folder.md5_of_filename(fln)
      - details = @folder.files[md5]
      - if details['type'] == 'audio'
        li
          - unless @folder.is_processed
            span.rating-choose-button> data-url=path_to(:abyss_file).with(@folder.id, md5)
              == details['rating'] ? ratings.select{|i|i[:score] == details['rating']}.first[:emoji] : '&#x2754;'
          - download_path = path_to(:abyss_file).with(@folder.id, md5)
          a.ajax-link.track-playback-link data-track-url=download_path href=download_path = fln
          '  | 
          == mediainfo(details)
          span.li-autohide
            '  | 
            a href=path_to(:abyss_extract_cover).with(@folder.id, md5) data-method="POST" Extract cover
            '  | 
            a.ajax-link.mediainfo-link data-url=path_to(:abyss_mediainfo).with(@folder.id, md5) Mediainfo
      - elsif details['type'] == 'image'
        li class=(details['cover'] == true ? 'is-cover' : nil)
          ' &#x1f5bc;
          a.cover-link.ajax-link href=path_to(:abyss_file).with(@folder.id, md5) = fln
          '  | 
          span.is-cover-text COVER
          span.li-autohide
            a.set-cover-link.ajax-link data-url=path_to(:abyss_set_cover).with(@folder.id, md5) Set cover
      - else
        li
          a href=path_to(:abyss_file).with(@folder.id, md5) = fln

div id='title-tip' style="display: none"
  - ratings.each do |r|
    div.rating-set-button data-value=r[:score] == r[:emoji]


- if @folder.is_processed
  ' * This folder is already processed
- elsif audio_count == 0
  ' * This folder cannot be processed because it doesn't contain any audio files
- else
  form method="POST" action=path_to(:download_cover)
    input type="text" name="url" placeholder="Cover URL"
    input type="hidden" name="folder_id" value=@folder.id
    input< type="submit" value="Download"

  - if @folder.release_id != nil
    h2 Release Notes
    == slim :notes_table, locals: {notes: @folder.release.notes, parent_id: "release-#{@folder.release_id}"}
    == slim :note_form, locals: {note_parent: @folder.release}
  - else
    script src="/js/jquery-ui.min.js"
    form.process-folder-form method="POST" action=path_to(:abyss_set_folder_info).with(@folder.id)
      input type="hidden" name="performer_id"
      table.performer-acmp-table.acmp-table
        tr
          th ID
          th Performer Name
          th Romaji
          th Aliases
        tr.performer-acmp-forms.acmp-forms
          td NEW
          td: input.autocomplete-performer type="text" data-url=path_to(:autocomplete_performer) data-id="performer" title="Field with autocompletion" name="performer_title"
          td: input type="text" name="performer_romaji"
          td: input type="text" name="performer_aliases"
        tr.performer-acmp-chosen-item.acmp-chosen-item
          td.performer-acmp-id
          td.performer-acmp-title
          td.performer-acmp-romaji
          td.performer-acmp-aliases

      input type="hidden" name="release_id"
      table.release-acmp-table.acmp-table
        tr
          th ID
          th Year
          th Release Title
          th Romaji
          th Edition
          th Release Type
        tr.release-acmp-forms.acmp-forms
          td NEW
          td: input type="text" name="release_year" style="width: 3em"
          td: input.autocomplete-release type="text" name="release_title" value=@folder.name data-url="" autocomplete="off"
          td: input type="text" name="release_romaji"
          td: input type="text" name="release_edition"
          td: input type="text" name="release_type" style="width: 7em"
        tr.release-acmp-chosen-item.acmp-chosen-item
          td.release-acmp-id
          td.release-acmp-year
          td.release-acmp-title
          td.release-acmp-romaji
          td.release-acmp-edition
          td.release-acmp-type
        tr
          td colspan="5"
          td: input type="submit"

pre#mediainfo

javascript:
 $(function(){
  $('.autocomplete-performer').each(function(){
    $(this).autocomplete({
      source: $(this).data('url'),
      minLength: 1,
      select: function(event,ui){
        $('input[name="performer_id"]').val(ui.item.id);
        $('.performer-acmp-table .performer-acmp-forms').hide()

        $('.performer-acmp-table .performer-acmp-id').html(ui.item.id);
        $('.performer-acmp-table .performer-acmp-title').html(ui.item.value);
        $('.performer-acmp-table .performer-acmp-romaji').html(ui.item.romaji);
        $('.performer-acmp-table .performer-acmp-aliases').html(ui.item.aliases);

        $('.performer-acmp-table .performer-acmp-chosen-item').show()

        $('.autocomplete-release').each(function(){
          $(this).autocomplete({
            source: `/autocomplete/performer/${ui.item.id}/release`,
            minLength: 0, // maybe should be 1
            select: function(event,rui){
              $('input[name="release_id"]').val(rui.item.id);
              $('.release-acmp-table .release-acmp-forms').hide();

              $('.release-acmp-table .release-acmp-id').html(rui.item.id);
              $('.release-acmp-table .release-acmp-year').html(rui.item.year);
              $('.release-acmp-table .release-acmp-title').html(rui.item.value);
              $('.release-acmp-table .release-acmp-romaji').html(rui.item.romaji);
              $('.release-acmp-table .release-acmp-type').html(rui.item.rtype);

              $('.release-acmp-table .release-acmp-chosen-item').show();

              return false;
            }
          });
        });

        return false;
      }
    });
  });
 });
 
 $(document).on('click', '.performer-acmp-chosen-item', function(event){
  $('input[name="performer_id"]').val(null);
  $('input[name="release_id"]').val(null);

  $('.performer-acmp-chosen-item').hide(); // aka $(this)
  $('.release-acmp-chosen-item').hide();

  $('.performer-acmp-table .performer-acmp-forms').show();
  $('.release-acmp-table .release-acmp-forms').show();

  $('.autocomplete-release').each('destroy');
 });
 $(document).on('click', '.release-acmp-chosen-item', function(event){
  $('input[name="release_id"]').val(null);
  $(this).hide();
  $('.release-acmp-table .release-acmp-forms').show();
 });

 $(document).on('click', '.set-cover-link', function(event){
  var li = $(this).parents('li');
  $.ajax({
    url: $(this).data('url'),
    method: "POST"
  }).done(function(data){
    $('.is-cover').removeClass('is-cover');
    li.addClass('is-cover');
  });
 });

 $(document).on('click', '.mediainfo-link', function(event){
  $.ajax({
    url: $(this).data('url'),
    method: "GET"
  }).done(function(data){
    $('#mediainfo').html(data);
  });
 });
